/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import conexion.ConexionMysql;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.nio.file.Paths;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author sergi
 */
public class FormularioInventario extends javax.swing.JFrame {
ConexionMysql con =new ConexionMysql();
//Creando un objeto en linea 16 de clase connection , para poder hacer uso de sus parametros 
Connection cn=con.conectar();


    /**
     * Creates new form FormularioAdministrador
     */
    public FormularioInventario(JFrame parent, String rol, String usuario) {
    this.setLocationRelativeTo(null);
    this.setResizable(false);
    setIconImage(new ImageIcon(getClass().getResource("/imagenes/login.png")).getImage());
    this.setSize(720,560);
    initComponents();
    setLocationRelativeTo(null);
    this.setTitle( "Bienvenido " + rol+": "+usuario+ "!");
    cargarProductos();
    llenarTabla();
    
    // Agrega el listener
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE); // Esto hace que solo se cierre la ventana de login

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Al cerrar, muestra el formulario principal
                parent.setVisible(true);
            }
        });
    
    agregarValidacionNumerica(txtClave, "Solo se permiten números en la clave");
    agregarValidacionNumerica(txtPreciop, "Solo se permiten números y decimales en el precio");
    agregarValidacionNumerica(txtCantidadp, "Solo se permiten números en la cantidad");
    
    // Configurar el botón "Registrar" como predeterminado
   // this.getRootPane().setDefaultButton(btnAgregar);
   
    // Lógica para habilitar/deshabilitar botones
    if (!rol.equalsIgnoreCase("administrador")) {
        btnAgregar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnExportarExcel.setEnabled(false);
        btnActualizar.setEnabled(false);
        // El botón Buscar debe estar habilitado
        btnBuscar.setEnabled(true);
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNombrep = new javax.swing.JTextField();
        txtPreciop = new javax.swing.JTextField();
        txtCantidadp = new javax.swing.JTextField();
        cboItem = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnExportarExcel = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTabla = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(130, 207, 251));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jLabel1.setText("Nombre  producto:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jLabel2.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jLabel2.setText("Precio  producto:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabel3.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jLabel3.setText("Cantidad  producto:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));
        jPanel1.add(txtNombrep, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, 173, -1));
        jPanel1.add(txtPreciop, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 173, -1));
        jPanel1.add(txtCantidadp, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, 173, -1));

        cboItem.setEditable(true);
        cboItem.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(cboItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 50, 130, -1));

        jLabel4.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jLabel4.setText("Producto:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, -1, 28));

        jPanel2.setBackground(new java.awt.Color(255, 204, 153));

        btnAgregar.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        btnAgregar.setText("REGISTRAR");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(153, 204, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 517, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 272, Short.MAX_VALUE)
        );

        btnExportarExcel.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        btnExportarExcel.setText("EXPORTAR EXCEL");
        btnExportarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(btnExportarExcel)
                        .addGap(21, 21, 21))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 101, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEliminar)
                        .addComponent(btnExportarExcel)))
                .addGap(95, 95, 95)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 640, 49));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 412, -1, -1));

        jLabel5.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jLabel5.setText("Descripcion:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));
        jPanel1.add(txtDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 173, -1));

        jPanel5.setBackground(new java.awt.Color(255, 204, 204));

        tblTabla.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Clave Producto", "Nombre ", "Precio", "Cantidad", "Descripcion"
            }
        ));
        jScrollPane2.setViewportView(tblTabla);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 670, -1));

        jLabel6.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        jLabel6.setText("INVENTARIO");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 0, -1, -1));

        jLabel7.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jLabel7.setText("Clave:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 90, -1));
        jPanel1.add(txtClave, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 170, -1));

        btnBuscar.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        btnBuscar.setText("BUSCAR");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 100, 130, -1));

        btnActualizar.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        jPanel1.add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 100, 130, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
    try {
        // Validación para asegurarse de que se haya seleccionado un ítem en cboItem
        if (cboItem.getSelectedItem() == null || cboItem.getSelectedItem().toString().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo de búsqueda no puede estar vacío", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;  // Detener la ejecución si el campo está vacío
        }
        
        String item = cboItem.getSelectedItem().toString().trim();
        String query = "SELECT * FROM producto WHERE nombre=?";
        PreparedStatement ps = cn.prepareStatement(query);
        ps.setString(1, item);
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            txtClave.setText(rs.getString(1));  // Asignar valor de la clave
            txtNombrep.setText(rs.getString(2));
            txtPreciop.setText(" $ " + rs.getString(3) + " MXN ");
            txtCantidadp.setText(rs.getString(4));
            txtDescripcion.setText(rs.getString(5));

            // Inhabilitar el campo clave para que no se pueda modificar
            txtClave.setEnabled(false);
            btnAgregar.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(null, "No se encontraron registros para mostrar", "Información", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Ocurrió un error", "", JOptionPane.ERROR_MESSAGE);
        cboItem.removeAllItems();
    }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnActualizar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
    try {
    if (txtClave.getText().isEmpty()|| txtNombrep.getText().isEmpty() || txtPreciop.getText().isEmpty() || txtCantidadp.getText().isEmpty() || txtDescripcion.getText().isEmpty()) {
      
      
      JOptionPane.showMessageDialog(null, "NO SE PERMITE ACTUALIZAR CAMPOS VACIOS","",JOptionPane.ERROR_MESSAGE); 
}else{ 
        
    
        int    clave  = Integer.parseInt(txtClave.getText());
        String nombre = txtNombrep.getText();
        double precio = formatearPrecio(txtPreciop.getText());
        int cantidad = Integer.parseInt(txtCantidadp.getText());
        String descripcion  = txtDescripcion.getText();
        String lista=cboItem.getSelectedItem().toString();
        
        String consulta="UPDATE producto SET id=?, nombre=? ,precio=? ,cantidad=? ,descripcion=? where nombre=?";
        PreparedStatement ps = cn.prepareStatement(consulta);
        ps.setInt(1, clave);
        ps.setString(2, nombre);
        ps.setDouble(3, precio);
        ps.setInt(4, cantidad);
        ps.setString(5, descripcion );
        ps.setString(6, lista);
        int valor = ps.executeUpdate();
        if(valor==1){
        JOptionPane.showMessageDialog(null, "REGISTRO ACTUALIZADO EXITOSAMENTE","",JOptionPane.INFORMATION_MESSAGE); 
        txtClave.setText("");
        txtNombrep.setText("");
        txtPreciop.setText("");
        txtCantidadp.setText("");
        txtDescripcion.setText("");
        txtNombrep.requestFocus();
        cargarProductos();
        llenarTabla();
        }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, ex,"",JOptionPane.ERROR_MESSAGE); 
            
    }
    
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      try {
        if ( txtNombrep.getText().isEmpty() || 
            txtPreciop.getText().isEmpty() || txtCantidadp.getText().isEmpty() || 
            txtDescripcion.getText().isEmpty()) {
            
            JOptionPane.showMessageDialog(null, "NO SE PERMITE ACTUALIZAR CAMPOS VACÍOS", "", JOptionPane.ERROR_MESSAGE);
        } else { 
            int clave = Integer.parseInt(txtClave.getText());
            String nombre = txtNombrep.getText();
            double precio = formatearPrecio(txtPreciop.getText());
            int cantidad = Integer.parseInt(txtCantidadp.getText());
            String descripcion = txtDescripcion.getText();
            String lista = cboItem.getSelectedItem().toString();
            
            String consulta = "UPDATE producto SET  nombre=?, precio=?, cantidad=?, descripcion=? WHERE id=?";
            PreparedStatement ps = cn.prepareStatement(consulta);
            ps.setString(1, nombre);
            ps.setDouble(2, precio);
            ps.setInt(3, cantidad);
            ps.setString(4, descripcion);
            
            ps.setInt(5, clave);
            
            int valor = ps.executeUpdate();
            if (valor == 1) {
                JOptionPane.showMessageDialog(null, "REGISTRO ACTUALIZADO EXITOSAMENTE", "", JOptionPane.INFORMATION_MESSAGE); 
                
                // Limpiar campos
                txtClave.setText("");
                txtNombrep.setText("");
                txtPreciop.setText("");
                txtCantidadp.setText("");
                txtDescripcion.setText("");
                txtNombrep.requestFocus();
                
                // Habilitar el campo Clave
                txtClave.setEnabled(true);
                btnAgregar.setEnabled(true);

                // Recargar datos
                cargarProductos();
                llenarTabla();
            }
        }
    } catch (SQLException ex) {
    ex.printStackTrace();
//        JOptionPane.showMessageDialog(null, ex, "", JOptionPane.ERROR_MESSAGE); 
    
}
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnExportarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarExcelActionPerformed
        // Ruta donde se guardará el archivo Excel

        String fileName = Paths.get(System.getProperty("user.home"), "Desktop", "productos.xls").toString();
        try {
            // Crear el archivo de Excel
            WritableWorkbook workbook = Workbook.createWorkbook(new File(fileName));
            WritableSheet sheet = workbook.createSheet("Productos", 0);

            // Realiza la consulta a la base de datos
            String query = "SELECT * FROM producto";
            try (PreparedStatement ps = cn.prepareStatement(query);
                ResultSet rs = ps.executeQuery()) {

                // Verificar si hay datos en el ResultSet
                if (!rs.isBeforeFirst()) {
                    JOptionPane.showMessageDialog(null, "No se encuentran productos a exportar", "Información", JOptionPane.INFORMATION_MESSAGE);
                    workbook.close();
                    return;
                }

                // Crear encabezados en la primera fila
                sheet.addCell(new Label(0, 0, "ID"));
                sheet.addCell(new Label(1, 0, "Nombre"));
                sheet.addCell(new Label(2, 0, "Precio"));
                sheet.addCell(new Label(3, 0, "Cantidad"));
                sheet.addCell(new Label(4, 0, "Descripción"));

                // Llenar el archivo con los datos de la base de datos
                int rowNum = 1;
                while (rs.next()) {
                    sheet.addCell(new Label(0, rowNum, rs.getString("id")));
                    sheet.addCell(new Label(1, rowNum, rs.getString("nombre")));
                    sheet.addCell(new Label(2, rowNum, rs.getString("precio")));
                    sheet.addCell(new Label(3, rowNum, rs.getString("cantidad")));
                    sheet.addCell(new Label(4, rowNum, rs.getString("descripcion")));
                    rowNum++;
                }

                // Guardar y cerrar el archivo Excel
                workbook.write();
                workbook.close();
                JOptionPane.showMessageDialog(null, "ARCHIVO EXCEL EXPORTADO CON ÉXITO", "", JOptionPane.INFORMATION_MESSAGE);

            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al acceder a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al exportar el archivo Excel.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnExportarExcelActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Verificar si cboItem tiene un elemento seleccionado
        if (cboItem.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Por favor, selecciona un producto para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Verificar si la conexión a la base de datos está inicializada
        if (cn == null) {
            JOptionPane.showMessageDialog(null, "No se pudo establecer conexión con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        PreparedStatement ps = null;
        try {
            // Obtener el valor seleccionado del comboBox
            String lista = cboItem.getSelectedItem().toString();

            // Definir la consulta de eliminación
            String consulta = "DELETE FROM producto WHERE nombre=?";
            ps = cn.prepareStatement(consulta);
            ps.setString(1, lista);

            // Ejecutar la eliminación
            int valor = ps.executeUpdate();

            if (valor == 1) {
                JOptionPane.showMessageDialog(null, "REGISTRO ELIMINADO CON ÉXITO", "", JOptionPane.INFORMATION_MESSAGE);
                txtClave.setText("");
                txtNombrep.setText("");
                txtPreciop.setText("");
                txtCantidadp.setText("");
                txtDescripcion.setText("");
                txtNombrep.requestFocus();
                cargarProductos();
                llenarTabla();
                // Habilitar el campo Clave
                txtClave.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione un registro para eliminar.", "Información", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al intentar eliminar el registro: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (ps != null) ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        if (txtClave.getText().isEmpty() || txtNombrep.getText().isEmpty() || txtPreciop.getText().isEmpty() || txtCantidadp.getText().isEmpty() || txtDescripcion.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Debes completar todos los campos", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    try {
        // Validaciones numéricas
        int clave = Integer.parseInt(txtClave.getText());
        double precio = formatearPrecio(txtPreciop.getText());
        int cantidad = Integer.parseInt(txtCantidadp.getText());

        // Continuar con el resto del procesamiento
        String nombre = txtNombrep.getText();
        String descripcion = txtDescripcion.getText();

        String query = "SELECT * FROM producto WHERE id=?";
        PreparedStatement psx = cn.prepareStatement(query);
        psx.setInt(1, clave);
        ResultSet rs = psx.executeQuery();

        if (rs.next()) {
            JOptionPane.showMessageDialog(null, "Ya existe un producto registrado con esa clave", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
        
        String query2 = "SELECT * FROM producto WHERE nombre=?";
        PreparedStatement psd = cn.prepareStatement(query2);
        psd.setString(1, nombre);
        ResultSet er = psd.executeQuery();
        
        if (er.next()) {
            JOptionPane.showMessageDialog(null, "Ya existe un producto registrado con ese nombre  ", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }else{

            Object[] options = {"Aceptar", "Cancelar"};
            int respuesta = JOptionPane.showOptionDialog(null, "¿Deseas continuar?", "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            if (respuesta == JOptionPane.YES_OPTION) {
                String consulta = "INSERT INTO producto(id, nombre, precio, cantidad, descripcion) VALUES(?, ?, ?, ?, ?)";
                PreparedStatement ps = cn.prepareStatement(consulta);
                ps.setInt(1, clave);
                ps.setString(2, nombre);
                ps.setDouble(3, precio);
                ps.setInt(4, cantidad);
                ps.setString(5, descripcion);
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "Datos del producto insertados correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                cargarProductos();
                llenarTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Operación cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Por favor, introduce valores numéricos válidos en Clave, Precio y Cantidad", "Error de entrada", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnAgregarActionPerformed

   
public void cargarProductos() {
    // Asegúrate de que la conexión esté establecida
    if (cn == null) {
        System.out.println("La conexión a la base de datos no está establecida.");
        return;
    }

    try {
        // Consulta para obtener los productos
        String consulta = "SELECT nombre FROM producto";
        PreparedStatement ps = cn.prepareStatement(consulta); 
        ResultSet rs = ps.executeQuery();
        
        // Limpiar el ComboBox antes de llenarlo
        cboItem.removeAllItems();
        
        // Llenar el ComboBox con los resultados
        while (rs.next()) {
            String producto = rs.getString("nombre");
            cboItem.addItem(producto);  // Añadir el nombre del producto
        }

        // Aplicar el autocompletado al JComboBox
        AutoCompleteDecorator.decorate(cboItem);  // Esto habilita el autocompletado

        // Cerrar recursos
        rs.close();
        ps.close();
        
    } catch (Exception e) {
        // Manejo de errores, imprimiendo la excepción
        e.printStackTrace();  // Esto te ayudará a ver si algo está fallando
    }
}
public void llenarTabla(){
    try {
    int columna; 
    String consulta = "SELECT * FROM producto";
    PreparedStatement ps = cn.prepareStatement(consulta);
    ResultSet rs = ps.executeQuery();
    ResultSetMetaData resultados=rs.getMetaData();
    columna = resultados.getColumnCount();
    DefaultTableModel df = (DefaultTableModel)tblTabla.getModel();
    df.setRowCount(0);
    while(rs.next()){
    Vector vector = new Vector();
    for(int i=1;i<=columna; i ++){
    vector.add(rs.getString("id"));
    vector.add(rs.getString("nombre"));
    vector.add(rs.getString("precio"));
    vector.add(rs.getString("cantidad"));
    vector.add(rs.getString("descripcion"));
    
    }
    df.addRow(vector);
        }
    
    } catch (Exception e) {
    e.printStackTrace();
    }



}

private void agregarValidacionNumerica(javax.swing.JTextField campo, String mensajeTooltip) {
    campo.addKeyListener(new java.awt.event.KeyAdapter() {
        @Override
        public void keyTyped(java.awt.event.KeyEvent evt) {
            char c = evt.getKeyChar();

            // Ignorar la tecla Enter
            if (c == KeyEvent.VK_ENTER) {
                evt.consume();
                return;
            }

            // Permitir la tecla Backspace o Delete
            if (Character.isISOControl(c)) { // Teclas de control como Backspace o Delete
                return;
            }

            // Validar que solo se permitan números, puntos decimales y signos negativos
            if (!Character.isDigit(c) && c != '.' && c != '-') {
                evt.consume(); // Bloquea la entrada
                campo.setText(""); // Limpia el contenido del campo
                campo.setToolTipText(mensajeTooltip); // Muestra un globo de ayuda
                JOptionPane.showMessageDialog(null, mensajeTooltip, "Entrada inválida", JOptionPane.WARNING_MESSAGE);
            }
        }
    });
}

public double formatearPrecio(String txtPreciop){

    String valorLimpio = txtPreciop.replaceAll("[$]|MXN|\\s+", "");
        
        
        return Double.parseDouble(valorLimpio);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnExportarExcel;
    private javax.swing.JComboBox<String> cboItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tblTabla;
    private javax.swing.JTextField txtCantidadp;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtNombrep;
    private javax.swing.JTextField txtPreciop;
    // End of variables declaration//GEN-END:variables
}