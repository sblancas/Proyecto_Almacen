/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import conexion.ConexionMysql;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

/**
 *
 * @author sergi
 */
public class FormularioAdministrador extends javax.swing.JFrame {
ConexionMysql con =new ConexionMysql();
//Creando un objeto en linea 16 de clase connection , para poder hacer uso de sus parametros 
Connection cn=con.conectar();


    /**
     * Creates new form FormularioAdministrador
     */
    public FormularioAdministrador() {
    this.setLocationRelativeTo(null);
    this.setTitle("ALMACEN ADMIND ");
    this.setSize(720,560);
    initComponents();
    setLocationRelativeTo(null);
    cargarProductos();
    llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNombrep = new javax.swing.JTextField();
        txtPreciop = new javax.swing.JTextField();
        txtCantidadp = new javax.swing.JTextField();
        cboItem = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnExportarExcel = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTabla = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        btnActualizar = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(130, 207, 251));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Nombre  producto");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Precio  producto");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Cantidad  producto");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));
        jPanel1.add(txtNombrep, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, 173, -1));
        jPanel1.add(txtPreciop, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 173, -1));
        jPanel1.add(txtCantidadp, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, 173, -1));

        cboItem.setEditable(true);
        cboItem.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(cboItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 50, 90, -1));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("ID Producto");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, -1, 28));

        jPanel2.setBackground(new java.awt.Color(255, 204, 153));

        btnAgregar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAgregar.setText("AGREGAR");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(153, 204, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 517, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 272, Short.MAX_VALUE)
        );

        btnExportarExcel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnExportarExcel.setText("EXPORTAR EXCEL");
        btnExportarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarExcelActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setText("BUSCAR");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnExportarExcel)
                        .addGap(21, 21, 21))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgregar))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEliminar)
                        .addComponent(btnExportarExcel)))
                .addGap(95, 95, 95)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 550, 49));

        btnBuscar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnBuscar.setText("BUSCAR");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 100, -1, -1));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 412, -1, -1));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Descripcion");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));
        jPanel1.add(txtDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 173, -1));

        jPanel5.setBackground(new java.awt.Color(255, 204, 204));

        tblTabla.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Clave Producto", "Nombre ", "Precio", "Cantidad", "Descripcion"
            }
        ));
        jScrollPane2.setViewportView(tblTabla);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 570, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel6.setText("ALMACEN ADMINISTRADOR");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setText("Clave");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 90, -1));
        jPanel1.add(txtClave, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 170, -1));

        btnActualizar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        jPanel1.add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 100, 130, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
if (txtClave.getText().isEmpty()||txtNombrep.getText().isEmpty() || txtPreciop.getText().isEmpty() || txtCantidadp.getText().isEmpty() || txtDescripcion.getText().isEmpty()) {
      
      
      JOptionPane.showMessageDialog(null,"DEBES COMPLETAR TODOS LOS CAMPOS","",JOptionPane.WARNING_MESSAGE);
}else{
     try{   
     int    clave  = Integer.parseInt(txtClave.getText());
     String nombre = txtNombrep.getText();
     double precio =formatearPrecio(txtPreciop.getText());
     int cantidad = Integer.parseInt(txtCantidadp.getText());
     String descripcion=txtDescripcion.getText();
     String query="SELECT * FROM producto where id=?";
     PreparedStatement psx = cn.prepareStatement(query);
     psx.setInt(1, clave);
     ResultSet rs = psx.executeQuery();
        
     if (rs.next()==true){
     JOptionPane.showMessageDialog(null, "YA EXISTE UN PRODUCTO REGISTRADO CON ESA CLAVE","",JOptionPane.ERROR_MESSAGE);
     }else{
     Object[]options = {"ACEPTAR","CANCELAR"};
     int respuesta = JOptionPane.showOptionDialog(null,"¿ DESEAS CONTINUAR ? ","CONFIRMACIÓN",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0] );
     if (respuesta == JOptionPane.YES_OPTION ){
     String consulta="INSERT INTO producto( id,nombre,precio,cantidad,descripcion)values('"+clave+"','"+nombre+"','"+precio+"','"+cantidad+"','"+descripcion+"')";
     PreparedStatement ps = cn.prepareStatement(consulta);
     ps.executeUpdate();
     JOptionPane.showMessageDialog(null, "DATOS DEL PRODUCTO INSERTADOS CORRECTAMENTE","",JOptionPane.INFORMATION_MESSAGE);
     cargarProductos();
     llenarTabla();
     }else if (respuesta == JOptionPane.CLOSED_OPTION || respuesta == JOptionPane.NO_OPTION) {
    JOptionPane.showMessageDialog(null, "Operación cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
        }
}
         
     } catch  (Exception e) {
 }
  }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
    
         
        Object selectItem = cboItem.getSelectedItem();
        String valorIngresado = selectItem != null ? selectItem.toString():"";
        try {
        Integer numero = Integer.valueOf(valorIngresado);
         String item = cboItem.getSelectedItem().toString().trim();
        String query="SELECT * FROM producto where id=?";
        PreparedStatement ps = cn.prepareStatement(query);
        ps.setString(1, item);
        ResultSet rs = ps.executeQuery();
        
        if (rs.next()==true){
        txtClave.setText(rs.getString(1));
        txtNombrep.setText(rs.getString(2));
        txtPreciop.setText(" $ "+rs.getString(3)+" MXN ");
        txtCantidadp.setText(rs.getString(4));
        txtDescripcion.setText(rs.getString(5));
       
        
        }else{
        JOptionPane.showMessageDialog(null, "NO SE ENCONTRARON REGISTROS PARA MOSTRAR","",JOptionPane.ERROR_MESSAGE);
        }   
        } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "NO SE PERMITEN LETRAS","",JOptionPane.ERROR_MESSAGE);
        cboItem.removeAllItems();
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
    try {
    if (txtClave.getText().isEmpty()|| txtNombrep.getText().isEmpty() || txtPreciop.getText().isEmpty() || txtCantidadp.getText().isEmpty() || txtDescripcion.getText().isEmpty()) {
      
      
      JOptionPane.showMessageDialog(null, "NO SE PERMITE ACTUALIZAR CAMPOS VACIOS","",JOptionPane.ERROR_MESSAGE); 
}else{ 
        
    
        int    clave  = Integer.parseInt(txtClave.getText());
        String nombre = txtNombrep.getText();
        double precio = formatearPrecio(txtPreciop.getText());
        int cantidad = Integer.parseInt(txtCantidadp.getText());
        String descripcion  = txtDescripcion.getText();
        String lista=cboItem.getSelectedItem().toString();
        
        String consulta="UPDATE producto SET id=?, nombre=? ,precio=? ,cantidad=? ,descripcion=? where id=?";
        PreparedStatement ps = cn.prepareStatement(consulta);
        ps.setInt(1, clave);
        ps.setString(2, nombre);
        ps.setDouble(3, precio);
        ps.setInt(4, cantidad);
        ps.setString(5, descripcion );
        ps.setString(6, lista);
        int valor = ps.executeUpdate();
        if(valor==1){
        JOptionPane.showMessageDialog(null, "REGISTRO ACTUALIZADO EXITOSAMENTE","",JOptionPane.INFORMATION_MESSAGE); 
        txtClave.setText("");
        txtNombrep.setText("");
        txtPreciop.setText("");
        txtCantidadp.setText("");
        txtDescripcion.setText("");
        txtNombrep.requestFocus();
        cargarProductos();
        llenarTabla();
        }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, ex,"",JOptionPane.ERROR_MESSAGE); 
            
    }
    
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
    // Verificar si cboItem tiene un elemento seleccionado
    if (cboItem.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(null, "Por favor, selecciona un producto para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Verificar si la conexión a la base de datos está inicializada
    if (cn == null) {
        JOptionPane.showMessageDialog(null, "No se pudo establecer conexión con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    PreparedStatement ps = null;
    try {
        // Obtener el valor seleccionado del comboBox
        String lista = cboItem.getSelectedItem().toString();
        
        // Definir la consulta de eliminación
        String consulta = "DELETE FROM producto WHERE id=?";
        ps = cn.prepareStatement(consulta);
        ps.setString(1, lista);
        
        // Ejecutar la eliminación
        int valor = ps.executeUpdate();
        
        if (valor == 1) {
            JOptionPane.showMessageDialog(null, "REGISTRO ELIMINADO CON ÉXITO", "", JOptionPane.INFORMATION_MESSAGE);
            txtClave.setText("");
            txtNombrep.setText("");
            txtPreciop.setText("");
            txtCantidadp.setText("");
            txtDescripcion.setText("");
            txtNombrep.requestFocus();
            cargarProductos();
            llenarTabla();
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el registro para eliminar.", "Información", JOptionPane.WARNING_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error al intentar eliminar el registro: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (ps != null) ps.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnExportarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarExcelActionPerformed
  // Ruta donde se guardará el archivo Excel
    String fileName = System.getProperty("user.home") + File.separator + "Documents" + File.separator + "productos.xls";

    try {
        // Crear el archivo de Excel
        WritableWorkbook workbook = Workbook.createWorkbook(new File(fileName));
        WritableSheet sheet = workbook.createSheet("Productos", 0);

        // Realiza la consulta a la base de datos
        String query = "SELECT * FROM producto";
        try (PreparedStatement ps = cn.prepareStatement(query);
             ResultSet rs = ps.executeQuery()) {

            // Verificar si hay datos en el ResultSet
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(null, "No se encuentran productos a exportar", "Información", JOptionPane.INFORMATION_MESSAGE);
                workbook.close();
                return;
            }

            // Crear encabezados en la primera fila
            sheet.addCell(new Label(0, 0, "ID"));
            sheet.addCell(new Label(1, 0, "Nombre"));
            sheet.addCell(new Label(2, 0, "Precio"));
            sheet.addCell(new Label(3, 0, "Cantidad"));
            sheet.addCell(new Label(4, 0, "Descripción"));

            // Llenar el archivo con los datos de la base de datos
            int rowNum = 1;
            while (rs.next()) {
                sheet.addCell(new Label(0, rowNum, rs.getString("id")));
                sheet.addCell(new Label(1, rowNum, rs.getString("nombre")));
                sheet.addCell(new Label(2, rowNum, rs.getString("precio")));
                sheet.addCell(new Label(3, rowNum, rs.getString("cantidad")));
                sheet.addCell(new Label(4, rowNum, rs.getString("descripcion")));
                rowNum++;
            }

            // Guardar y cerrar el archivo Excel
            workbook.write();
            workbook.close();
            JOptionPane.showMessageDialog(null, "ARCHIVO EXCEL EXPORTADO CON ÉXITO", "", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al acceder a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al exportar el archivo Excel.", "Error", JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_btnExportarExcelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioAdministrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioAdministrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioAdministrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioAdministrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioAdministrador().setVisible(true);
            }
        });
    }
public void cargarProductos(){
try{
String consulta="SELECT id FROM producto";
PreparedStatement ps = cn.prepareStatement(consulta); 
ResultSet rs = ps.executeQuery();
cboItem.removeAllItems();
while(rs.next()){
cboItem.addItem(rs.getString(1));
    
}
        
}catch(Exception e ){
    
}
}
public double formatearPrecio(String txtPreciop){

String valorLimpio = txtPreciop.replaceAll("[$]|MXN|\\s+", "");
        
        
        return Double.parseDouble(valorLimpio);
}
public void llenarTabla(){
    try {
    int columna; 
    String consulta = "SELECT * FROM producto";
    PreparedStatement ps = cn.prepareStatement(consulta);
    ResultSet rs = ps.executeQuery();
    ResultSetMetaData resultados=rs.getMetaData();
    columna = resultados.getColumnCount();
    DefaultTableModel df = (DefaultTableModel)tblTabla.getModel();
    df.setRowCount(0);
    while(rs.next()){
    Vector vector = new Vector();
    for(int i=1;i<=columna; i ++){
    vector.add(rs.getString("id"));
    vector.add(rs.getString("nombre"));
    vector.add(rs.getString("precio"));
    vector.add(rs.getString("cantidad"));
    vector.add(rs.getString("descripcion"));
    
    }
    df.addRow(vector);
        }
    
    } catch (Exception e) {
    e.printStackTrace();
    }



}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnExportarExcel;
    private javax.swing.JComboBox<String> cboItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tblTabla;
    private javax.swing.JTextField txtCantidadp;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtNombrep;
    private javax.swing.JTextField txtPreciop;
    // End of variables declaration//GEN-END:variables
}
